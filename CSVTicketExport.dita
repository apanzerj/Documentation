<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN"
"ditabase.dtd">
<dita>
  <topic id="CSVTicketExport">
    <title>Introduction</title>

    <body>
      <p>Objective: We want to dump to CSV data from the Ticket Export
      endpoint of the Zendesk API version 2.0.</p>

      <p>Tools: You'll need the curlWrap function, as always.</p>

      <p>Notes: While we are developing and testing our code we'll want to use
      the sample endpoint which gives us the same sample data over and over.
      The purpose of this is that the sample endpoint is more forgiving and
      developed for this very purpose.</p>
    </body>
  </topic>

  <topic id="CSVTicketExport-2">
    <title>Setup</title>

    <body>
      <p><i>Let's get started with curlWrap.</i></p>

      <ol>
        <li>You can get the curlWrap function here: <codeblock>***FIXME***&lt;script src="https://gist.github.com/2920899.js"&gt; &lt;/script&gt;</codeblock></li>

        <li>Put this in a new script file called csv.php</li>

        <li>We need to create a new file, of course. The code below will store
        our filename to a variable and create a file handler.<codeblock>$myFile = "users.csv";
$fh = fopen($myFile, 'w');</codeblock></li>

        <li>We now have a file handler that is stored in the variable $fh.
        When we refer to things we will be doing with our new CSV file we will
        use that variable.</li>

        <li>The ticket export endpoint requires a date/time stamp that is in a
        specific format called UTC Epoch time. Without getting overly
        technical this is a timestamp, in seconds, since some point in time
        long ago. To do this we'll use two functions.<p>This sets the timezone
        to UTC:</p><codeblock>date_default_timezone_set('UTC');</codeblock><p>This
        tells our program how far back we want to go. <codeblock>$time = strtotime("-8 hours");</codeblock></p><p>You
        might be wondering what that means? The ticket export endpoint gives
        us all tickets that were touched between two time periods. The hitch
        is that the ending time period is always now (ie: when we run the
        command). The shortest increment we can go back is 5 minutes. In this
        case we are going to pull a list of tickets from the last 8 hours.
        </p></li>

        <li>Now we pull our data from the endpoint:<codeblock>$decoded = curlWrap("/exports/tickets/sample.json?start_time=1332034771", null, "GET");</codeblock></li>
      </ol>
    </body>
  </topic>

  <topic id="CSVTicketExport-3">
    <title>Building the CSV</title>

    <body>
      <p><i>Let's build our CSV.</i></p>

      <ol>
        <li>Now we need to create the header of our CSV. The header usually
        contains all the column headings we want to use. To create this
        heading we'll copy the first row of data to a variable called $first.
        Then we'll convert this to an array (since it started out as an
        object, if this doesn't make sense, don't worry!) and finally, we'll
        flip it so that all the values are keys and the keys are values.
        <codeblock>$first = $decoded-&gt;results[0];
$first = (array) $first;
$keys = array_keys($first);</codeblock></li>

        <li>Now we have a column headings in the array called $keys. We need
        to write this to our CSV. We use the function fputcsv:<codeblock>fputcsv($fh, $keys, ",", "\"");</codeblock></li>

        <li>As you can see, fputcsv takes 4 arguments: the file handler ($fh),
        the array of data to write (in this case, the keys), the delimiter
        (ie: comma) and the character to use to encapsulate each field (you
        should stick with the quote mark ("). For the last paramater, you'll
        need to "escape" the quote. To do this simply but a backslash before
        the quote mark so php knows that the quote character is being
        referenced.</li>

        <li>Finally, we iterate through each result we got from Zendesk and
        write it to the file we are working on. We do this like so:<codeblock>foreach($decoded-&gt;results as $result){
     $result = (array) $result;
     fputcsv($fh, $result, ",", "\"");
}</codeblock></li>

        <li>As you can see above, we need to convert (like we did before) from
        an object to an array. We do this the same way as before by putting
        (array) infront of the variable. This is known as casting.</li>

        <li>The last thing we do is "close" the file we are working on. We do
        this with this command:<codeblock>fclose($fh);</codeblock></li>
      </ol>
    </body>
  </topic>
</dita>
